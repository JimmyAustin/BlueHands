{"sexprs": "(declare-fun FirstTimestamp () (_ BitVec 256))\n(declare-fun LastReturnType () (_ BitVec 256))\n(declare-fun AttackerWallet () (_ BitVec 256))\n(declare-fun CallValue_1 () (_ BitVec 256))\n(declare-fun CallValue_0 () (_ BitVec 256))\n(declare-fun AttackerWalletStarting () (_ BitVec 256))\n(declare-fun Timestamp_0 () (_ BitVec 256))\n(declare-fun LastTimestamp () (_ BitVec 256))\n(declare-fun Timestamp_1 () (_ BitVec 256))\n(declare-fun |61747461636b6572000000000000000000000000_Wallet|\n             ()\n             (_ BitVec 256))\n(declare-fun |636f6e7472616374000000000000000000000000_Wallet|\n             ()\n             (_ BitVec 256))\n(declare-fun k!22831 () (_ BitVec 32))\n(declare-fun input_0_32 () (_ BitVec 256))\n(declare-fun k!22832 () Bool)\n(declare-fun CallDataSize_1 () (_ BitVec 256))\n(declare-fun k!22833 () (_ BitVec 32))\n(declare-fun input_1_0 () (_ BitVec 256))\n(declare-fun k!22834 () Bool)\n(declare-fun input@0_4 () (_ BitVec 256))\n(declare-fun k!22835 () (_ BitVec 31))\n(declare-fun CallDataSize_0 () (_ BitVec 256))\n(declare-fun input_0_0 () (_ BitVec 256))\n(assert (bvsge CallValue_0\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (bvsge AttackerWalletStarting CallValue_0))\n(assert (bvsge (bvsub AttackerWalletStarting CallValue_0)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (= (ite (bvslt CallDataSize_0\n               #x0000000000000000000000000000000000000000000000000000000000000004)\n        1\n        0)\n   0))\n(assert (= (ite (= (bvudiv input_0_0\n                   #x0000000100000000000000000000000000000000000000000000000000000000)\n           #x0000000000000000000000000000000000000000000000000000000027e235e3)\n        #x0000000000000000000000000000000000000000000000000000000000000001\n        #x0000000000000000000000000000000000000000000000000000000000000000)\n   #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (= (ite (= (bvudiv input_0_0\n                   #x0000000100000000000000000000000000000000000000000000000000000000)\n           #x000000000000000000000000000000000000000000000000000000003ccfd60b)\n        #x0000000000000000000000000000000000000000000000000000000000000001\n        #x0000000000000000000000000000000000000000000000000000000000000000)\n   #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (distinct (ite (= (bvudiv input_0_0\n                          #x0000000100000000000000000000000000000000000000000000000000000000)\n                  #x0000000000000000000000000000000000000000000000000000000079af55e4)\n               #x0000000000000000000000000000000000000000000000000000000000000001\n               #x0000000000000000000000000000000000000000000000000000000000000000)\n          #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (distinct (ite (= CallValue_0\n                  #x0000000000000000000000000000000000000000000000000000000000000000)\n               #x0000000000000000000000000000000000000000000000000000000000000001\n               #x0000000000000000000000000000000000000000000000000000000000000000)\n          #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (let ((a!1 (= (ite (bvslt (bvsub CallDataSize_0\n                                 #x0000000000000000000000000000000000000000000000000000000000000004)\n                          #x0000000000000000000000000000000000000000000000000000000000000020)\n                   1\n                   0)\n              0)))\n  (distinct (ite a!1\n                 #x0000000000000000000000000000000000000000000000000000000000000001\n                 #x0000000000000000000000000000000000000000000000000000000000000000)\n            #x0000000000000000000000000000000000000000000000000000000000000000)))\n(assert (= ((_ extract 223 0) input_0_0) ((_ extract 255 32) input@0_4)))\n(assert (= ((_ extract 31 0) input@0_4) ((_ extract 255 224) input_0_32)))\n(assert (bvsgt Timestamp_1 Timestamp_0))\n(assert (bvsge CallValue_1\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (bvsge (bvsub AttackerWalletStarting CallValue_0) CallValue_1))\n(assert (bvsge (bvsub (bvsub AttackerWalletStarting CallValue_0) CallValue_1)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (= (ite (bvslt CallDataSize_1\n               #x0000000000000000000000000000000000000000000000000000000000000004)\n        1\n        0)\n   0))\n(assert (= (ite (= (bvudiv input_1_0\n                   #x0000000100000000000000000000000000000000000000000000000000000000)\n           #x0000000000000000000000000000000000000000000000000000000027e235e3)\n        #x0000000000000000000000000000000000000000000000000000000000000001\n        #x0000000000000000000000000000000000000000000000000000000000000000)\n   #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (distinct (ite (= (bvudiv input_1_0\n                          #x0000000100000000000000000000000000000000000000000000000000000000)\n                  #x000000000000000000000000000000000000000000000000000000003ccfd60b)\n               #x0000000000000000000000000000000000000000000000000000000000000001\n               #x0000000000000000000000000000000000000000000000000000000000000000)\n          #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (distinct (ite (= CallValue_1\n                  #x0000000000000000000000000000000000000000000000000000000000000000)\n               #x0000000000000000000000000000000000000000000000000000000000000001\n               #x0000000000000000000000000000000000000000000000000000000000000000)\n          #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (let ((a!1 (= (ite (bvugt Timestamp_1\n                          (bvadd #x000000000000000000000000000000000000000000000000000000005a5219d0\n                                 input@0_4))\n                   1\n                   0)\n              0)))\n  (distinct (ite (= (ite a!1\n                         #x0000000000000000000000000000000000000000000000000000000000000001\n                         #x0000000000000000000000000000000000000000000000000000000000000000)\n                    #x0000000000000000000000000000000000000000000000000000000000000000)\n                 #x0000000000000000000000000000000000000000000000000000000000000001\n                 #x0000000000000000000000000000000000000000000000000000000000000000)\n            #x0000000000000000000000000000000000000000000000000000000000000000)))\n(assert (bvsge (bvadd CallValue_0\n              #x0000000000000000000000000000000000000000000000004563918244f40000\n              CallValue_1)\n       #x0000000000000000000000000000000000000000000000004563918244f40000))\n(assert (bvsge (bvsub (bvadd CallValue_0\n                     #x0000000000000000000000000000000000000000000000004563918244f40000\n                     CallValue_1)\n              #x0000000000000000000000000000000000000000000000004563918244f40000)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (= FirstTimestamp\n   #x000000000000000000000000000000000000000000000000000000005a48df51))\n(assert (bvsgt (bvadd FirstTimestamp\n              #x0000000000000000000000000000000000000000000000000000000000093a80)\n       LastTimestamp))\n(assert (bvsgt AttackerWallet AttackerWalletStarting))\n(assert (= LastReturnType\n   #x0000000000000000000000000000000000000000000000000000000000000002))\n(assert (= AttackerWallet\n   (bvadd (bvsub (bvsub AttackerWalletStarting CallValue_0) CallValue_1)\n          #x0000000000000000000000000000000000000000000000004563918244f40000)))\n(assert (= FirstTimestamp Timestamp_0))\n(assert (= LastTimestamp Timestamp_1))\n(assert (= |61747461636b6572000000000000000000000000_Wallet|\n   (bvadd (bvsub (bvsub AttackerWalletStarting CallValue_0) CallValue_1)\n          #x0000000000000000000000000000000000000000000000004563918244f40000)))\n(assert (= |636f6e7472616374000000000000000000000000_Wallet|\n   (bvsub (bvadd CallValue_0\n                 #x0000000000000000000000000000000000000000000000004563918244f40000\n                 CallValue_1)\n          #x0000000000000000000000000000000000000000000000004563918244f40000)))\n(assert (bvsge (bvadd (bvsub (bvsub AttackerWalletStarting CallValue_0) CallValue_1)\n              #x0000000000000000000000000000000000000000000000004563918244f40000)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (bvsge (bvsub (bvadd CallValue_0\n                     #x0000000000000000000000000000000000000000000000004563918244f40000\n                     CallValue_1)\n              #x0000000000000000000000000000000000000000000000004563918244f40000)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(model-add FirstTimestamp\n           ()\n           (_ BitVec 256)\n           #x000000000000000000000000000000000000000000000000000000005a48df51)\n(model-add LastReturnType\n           ()\n           (_ BitVec 256)\n           #x0000000000000000000000000000000000000000000000000000000000000002)\n(model-add AttackerWallet\n           ()\n           (_ BitVec 256)\n           (bvadd #x0000000000000000000000000000000000000000000000004563918244f40000\n                  AttackerWalletStarting\n                  (bvmul #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                         CallValue_0)\n                  (bvmul #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                         CallValue_1)))\n(model-add Timestamp_0\n           ()\n           (_ BitVec 256)\n           #x000000000000000000000000000000000000000000000000000000005a48df51)\n(model-add LastTimestamp () (_ BitVec 256) Timestamp_1)\n(model-add |61747461636b6572000000000000000000000000_Wallet|\n           ()\n           (_ BitVec 256)\n           (bvadd #x0000000000000000000000000000000000000000000000004563918244f40000\n                  AttackerWalletStarting\n                  (bvmul #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                         CallValue_0)\n                  (bvmul #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                         CallValue_1)))\n(model-add |636f6e7472616374000000000000000000000000_Wallet|\n           ()\n           (_ BitVec 256)\n           (bvadd CallValue_0 CallValue_1))\n(model-del k!22831)\n(model-add input_0_32\n           ()\n           (_ BitVec 256)\n           (concat k!22831\n                   #x00000000000000000000000000000000000000000000000000000000))\n(model-del k!22832)\n(model-add CallDataSize_1\n           ()\n           (_ BitVec 256)\n           (ite (or k!22832\n                    (= #x0000000000000000000000000000000000000000000000000000000000000004\n                       #x8000000000000000000000000000000000000000000000000000000000000000))\n                #x0000000000000000000000000000000000000000000000000000000000000004\n                (bvsub #x0000000000000000000000000000000000000000000000000000000000000004\n                       #x0000000000000000000000000000000000000000000000000000000000000001)))\n(model-del k!22833)\n(model-add input_1_0\n           ()\n           (_ BitVec 256)\n           (concat k!22833\n                   #x00000000000000000000000000000000000000000000000000000000))\n(model-del k!22834)\n(model-add k!22831\n           ()\n           (_ BitVec 32)\n           (ite k!22834\n                ((_ extract 31 0) input@0_4)\n                (bvnot ((_ extract 31 0) input@0_4))))\n(model-del k!22835)\n(model-add Timestamp_1\n           ()\n           (_ BitVec 256)\n           (concat #b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n                   k!22835))\n", "stats": {"eliminated vars": 1039, "eliminated applications": 4, "mk bool var": 2634, "mk binary clause": 53292, "mk ternary clause": 2927, "mk clause": 773, "del clause": 4, "conflicts": 146, "propagations": 2958, "decisions": 7949, "binary propagations": 22755, "ternary propagations": 14245, "minimized lits": 1, "dyn subsumption resolution": 2, "units": 6, "elim clauses": 1, "elim literals": 4, "rlimit count": 20081732, "max memory": 16.64, "memory": 3.19, "num allocs": 12362162240.0}}