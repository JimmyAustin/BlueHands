{"sexprs": "(declare-fun FirstTimestamp () (_ BitVec 256))\n(declare-fun LastReturnType () Int)\n(declare-fun AttackerWallet () (_ BitVec 256))\n(declare-fun CallValue_1 () (_ BitVec 256))\n(declare-fun CallValue_0 () (_ BitVec 256))\n(declare-fun AttackerWalletStarting () (_ BitVec 256))\n(declare-fun Timestamp_0 () (_ BitVec 256))\n(declare-fun LastTimestamp () (_ BitVec 256))\n(declare-fun Timestamp_1 () (_ BitVec 256))\n(declare-fun |61747461636b6572000000000000000000000000_Wallet|\n             ()\n             (_ BitVec 256))\n(declare-fun |636f6e7472616374000000000000000000000000_Wallet|\n             ()\n             (_ BitVec 256))\n(declare-fun k!92 () (_ BitVec 32))\n(declare-fun input_0_32 () (_ BitVec 256))\n(declare-fun k!93 () Bool)\n(declare-fun CallDataSize_1 () Int)\n(declare-fun k!94 () (_ BitVec 32))\n(declare-fun input_1_0 () (_ BitVec 256))\n(declare-fun k!95 () Bool)\n(declare-fun input@0_4 () (_ BitVec 256))\n(declare-fun k!96 () (_ BitVec 31))\n(declare-fun CallDataSize_0 () Int)\n(declare-fun input_0_0 () (_ BitVec 256))\n(assert (bvsge CallValue_0\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (bvsge AttackerWalletStarting CallValue_0))\n(assert (bvsge (bvsub AttackerWalletStarting CallValue_0)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (= (ite (< CallDataSize_0 4) 1 0) 0))\n(assert (= (ite (= (bvudiv input_0_0\n                   #x0000000100000000000000000000000000000000000000000000000000000000)\n           #x0000000000000000000000000000000000000000000000000000000027e235e3)\n        #x0000000000000000000000000000000000000000000000000000000000000001\n        #x0000000000000000000000000000000000000000000000000000000000000000)\n   #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (= (ite (= (bvudiv input_0_0\n                   #x0000000100000000000000000000000000000000000000000000000000000000)\n           #x000000000000000000000000000000000000000000000000000000003ccfd60b)\n        #x0000000000000000000000000000000000000000000000000000000000000001\n        #x0000000000000000000000000000000000000000000000000000000000000000)\n   #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (distinct (ite (= (bvudiv input_0_0\n                          #x0000000100000000000000000000000000000000000000000000000000000000)\n                  #x0000000000000000000000000000000000000000000000000000000079af55e4)\n               #x0000000000000000000000000000000000000000000000000000000000000001\n               #x0000000000000000000000000000000000000000000000000000000000000000)\n          #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (distinct (ite (= CallValue_0\n                  #x0000000000000000000000000000000000000000000000000000000000000000)\n               #x0000000000000000000000000000000000000000000000000000000000000001\n               #x0000000000000000000000000000000000000000000000000000000000000000)\n          #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (let ((a!1 (= (ite (< (- CallDataSize_0 4) 32) 1 0) 0)))\n  (distinct (ite a!1\n                 #x0000000000000000000000000000000000000000000000000000000000000001\n                 #x0000000000000000000000000000000000000000000000000000000000000000)\n            #x0000000000000000000000000000000000000000000000000000000000000000)))\n(assert (= ((_ extract 223 0) input_0_0) ((_ extract 255 32) input@0_4)))\n(assert (= ((_ extract 31 0) input@0_4) ((_ extract 255 224) input_0_32)))\n(assert (bvsgt Timestamp_1 Timestamp_0))\n(assert (bvsge CallValue_1\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (bvsge (bvsub AttackerWalletStarting CallValue_0) CallValue_1))\n(assert (bvsge (bvsub (bvsub AttackerWalletStarting CallValue_0) CallValue_1)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (= (ite (< CallDataSize_1 4) 1 0) 0))\n(assert (= (ite (= (bvudiv input_1_0\n                   #x0000000100000000000000000000000000000000000000000000000000000000)\n           #x0000000000000000000000000000000000000000000000000000000027e235e3)\n        #x0000000000000000000000000000000000000000000000000000000000000001\n        #x0000000000000000000000000000000000000000000000000000000000000000)\n   #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (distinct (ite (= (bvudiv input_1_0\n                          #x0000000100000000000000000000000000000000000000000000000000000000)\n                  #x000000000000000000000000000000000000000000000000000000003ccfd60b)\n               #x0000000000000000000000000000000000000000000000000000000000000001\n               #x0000000000000000000000000000000000000000000000000000000000000000)\n          #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (distinct (ite (= CallValue_1\n                  #x0000000000000000000000000000000000000000000000000000000000000000)\n               #x0000000000000000000000000000000000000000000000000000000000000001\n               #x0000000000000000000000000000000000000000000000000000000000000000)\n          #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (let ((a!1 (= (ite (bvugt Timestamp_1\n                          (bvadd #x000000000000000000000000000000000000000000000000000000005a5219d0\n                                 input@0_4))\n                   1\n                   0)\n              0)))\n  (distinct (ite (= (ite a!1\n                         #x0000000000000000000000000000000000000000000000000000000000000001\n                         #x0000000000000000000000000000000000000000000000000000000000000000)\n                    #x0000000000000000000000000000000000000000000000000000000000000000)\n                 #x0000000000000000000000000000000000000000000000000000000000000001\n                 #x0000000000000000000000000000000000000000000000000000000000000000)\n            #x0000000000000000000000000000000000000000000000000000000000000000)))\n(assert (bvsge (bvadd CallValue_0\n              #x0000000000000000000000000000000000000000000000004563918244f40000\n              CallValue_1)\n       #x0000000000000000000000000000000000000000000000004563918244f40000))\n(assert (bvsge (bvsub (bvadd CallValue_0\n                     #x0000000000000000000000000000000000000000000000004563918244f40000\n                     CallValue_1)\n              #x0000000000000000000000000000000000000000000000004563918244f40000)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (= FirstTimestamp\n   #x000000000000000000000000000000000000000000000000000000005a48df51))\n(assert (bvsgt (bvadd FirstTimestamp\n              #x0000000000000000000000000000000000000000000000000000000000093a80)\n       LastTimestamp))\n(assert (bvsgt AttackerWallet AttackerWalletStarting))\n(assert (= LastReturnType 2))\n(assert (= AttackerWallet\n   (bvadd (bvsub (bvsub AttackerWalletStarting CallValue_0) CallValue_1)\n          #x0000000000000000000000000000000000000000000000004563918244f40000)))\n(assert (= FirstTimestamp Timestamp_0))\n(assert (= LastTimestamp Timestamp_1))\n(assert (= |61747461636b6572000000000000000000000000_Wallet|\n   (bvadd (bvsub (bvsub AttackerWalletStarting CallValue_0) CallValue_1)\n          #x0000000000000000000000000000000000000000000000004563918244f40000)))\n(assert (= |636f6e7472616374000000000000000000000000_Wallet|\n   (bvsub (bvadd CallValue_0\n                 #x0000000000000000000000000000000000000000000000004563918244f40000\n                 CallValue_1)\n          #x0000000000000000000000000000000000000000000000004563918244f40000)))\n(assert (bvsge (bvadd (bvsub (bvsub AttackerWalletStarting CallValue_0) CallValue_1)\n              #x0000000000000000000000000000000000000000000000004563918244f40000)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(assert (bvsge (bvsub (bvadd CallValue_0\n                     #x0000000000000000000000000000000000000000000000004563918244f40000\n                     CallValue_1)\n              #x0000000000000000000000000000000000000000000000004563918244f40000)\n       #x0000000000000000000000000000000000000000000000000000000000000000))\n(model-add FirstTimestamp\n           ()\n           (_ BitVec 256)\n           #x000000000000000000000000000000000000000000000000000000005a48df51)\n(model-add LastReturnType () Int 2)\n(model-add AttackerWallet\n           ()\n           (_ BitVec 256)\n           (bvadd #x0000000000000000000000000000000000000000000000004563918244f40000\n                  AttackerWalletStarting\n                  (bvmul #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                         CallValue_0)\n                  (bvmul #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                         CallValue_1)))\n(model-add Timestamp_0\n           ()\n           (_ BitVec 256)\n           #x000000000000000000000000000000000000000000000000000000005a48df51)\n(model-add LastTimestamp () (_ BitVec 256) Timestamp_1)\n(model-add |61747461636b6572000000000000000000000000_Wallet|\n           ()\n           (_ BitVec 256)\n           (bvadd #x0000000000000000000000000000000000000000000000004563918244f40000\n                  AttackerWalletStarting\n                  (bvmul #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                         CallValue_0)\n                  (bvmul #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                         CallValue_1)))\n(model-add |636f6e7472616374000000000000000000000000_Wallet|\n           ()\n           (_ BitVec 256)\n           (bvadd CallValue_0 CallValue_1))\n(model-del k!92)\n(model-add input_0_32\n           ()\n           (_ BitVec 256)\n           (concat k!92\n                   #x00000000000000000000000000000000000000000000000000000000))\n(model-del k!93)\n(model-add CallDataSize_1 () Int (ite k!93 4 (+ 4 (- 1))))\n(model-del k!94)\n(model-add input_1_0\n           ()\n           (_ BitVec 256)\n           (concat k!94\n                   #x00000000000000000000000000000000000000000000000000000000))\n(model-del k!95)\n(model-add k!92\n           ()\n           (_ BitVec 32)\n           (ite k!95\n                ((_ extract 31 0) input@0_4)\n                (bvnot ((_ extract 31 0) input@0_4))))\n(model-del k!96)\n(model-add Timestamp_1\n           ()\n           (_ BitVec 256)\n           (concat #b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n                   k!96))\n(rmodel->model-converter-wrapper\nCallValue_1 -> #x0000000000000000000000000000000000000000000000000000000000000000\ninput_0_0 -> #x79af55e4ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nInt -> Int!val!2\nCallValue_0 -> #x0000000000000000000000000000000000000000000000000000000000000000\ninput@0_4 -> #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000000\nInt -> Int!val!1\nCallDataSize_0 -> Int!val!0\nAttackerWalletStarting -> #x7ffffffffffbfffffffffffffffffffffdffffffffffffffba9c6c703b080001\nTimestamp_1 -> #x000000000000000000000000000000000000000000000000000000005a500001\ninput_1_0 -> #x3ccfd60b00000000000000000000000000000000000000000000000000000000\nCallDataSize_1 -> 4\ninput_0_32 -> #xc000000000000000000000000000000000000000000000000000000000000000\n636f6e7472616374000000000000000000000000_Wallet -> #x0000000000000000000000000000000000000000000000000000000000000000\n61747461636b6572000000000000000000000000_Wallet -> #x7ffffffffffbfffffffffffffffffffffdfffffffffffffffffffdf27ffc0001\nLastTimestamp -> #x000000000000000000000000000000000000000000000000000000005a500001\nTimestamp_0 -> #x000000000000000000000000000000000000000000000000000000005a48df51\nAttackerWallet -> #x7ffffffffffbfffffffffffffffffffffdfffffffffffffffffffdf27ffc0001\nLastReturnType -> 2\nFirstTimestamp -> #x000000000000000000000000000000000000000000000000000000005a48df51\n>= -> {\n  Int!val!0 Int!val!1 -> true\n  Int!val!0 Int!val!2 -> true\n  else -> true\n}\n)\n", "stats": {"mk bool var": 10149, "eliminated vars": 7, "eliminated applications": 4, "conflicts": 27, "decisions": 8114, "propagations": 34599, "binary propagations": 19439, "final checks": 1, "added eqs": 17, "mk clause": 23447, "del clause": 15748, "num checks": 1, "bv diseqs": 2, "bv bit2core": 2092, "bv->core eq": 6, "bv dynamic eqs": 6, "num allocs": 739760122, "rlimit count": 11447569, "max memory": 9.26, "memory": 2.62}}